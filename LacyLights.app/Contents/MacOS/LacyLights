#!/bin/bash

# LacyLights Mac App Launcher
# This script is the main executable for the LacyLights.app bundle

# Get the directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
APP_BUNDLE="$( cd "$SCRIPT_DIR/../.." && pwd )"
RESOURCES_DIR="$APP_BUNDLE/Contents/Resources"

# Source the paths configuration
source "$RESOURCES_DIR/scripts/paths.sh"

# Function to show dialog
show_dialog() {
    local title="$1"
    local message="$2"
    local buttons="${3:-OK}"

    osascript -e "display dialog \"$message\" with title \"$title\" buttons {$buttons} default button 1"
}

# Function to get text input
get_text_input() {
    local title="$1"
    local prompt="$2"
    local default_value="$3"

    osascript -e "display dialog \"$prompt\" default answer \"$default_value\" with title \"$title\" buttons {\"Cancel\", \"OK\"} default button \"OK\"" | awk -F: '{print $NF}'
}

# Function to show notification
show_notification() {
    local title="$1"
    local message="$2"

    osascript -e "display notification \"$message\" with title \"$title\""
}

# Check if this is first run
if is_first_run; then
    # Welcome dialog
    result=$(show_dialog "Welcome to LacyLights" "This appears to be your first time running LacyLights. Would you like to set up the platform now?" "\"Cancel\", \"Setup\"")

    if [[ ! "$result" =~ "Setup" ]]; then
        exit 0
    fi

    # Get GitHub organization (default to bbernstein)
    github_org=$(get_text_input "GitHub Setup" "Enter your GitHub organization name:" "bbernstein")

    # Run setup in Terminal
    osascript <<EOF
tell application "Terminal"
    activate
    do script "source '$RESOURCES_DIR/scripts/paths.sh' && '$RESOURCES_DIR/scripts/setup.sh' $github_org"

    -- Wait for setup to complete
    delay 2
    repeat
        delay 1
        if not busy of window 1 then exit repeat
    end repeat

    -- Keep terminal open for user to see results
    delay 3
end tell
EOF

    # Wait for Terminal to finish
    sleep 5

    # Check if setup was successful
    if [ ! -d "$LACYLIGHTS_NODE_DIR" ] || [ ! -d "$LACYLIGHTS_FE_DIR" ]; then
        show_dialog "Setup Error" "Setup did not complete successfully. Please check the Terminal window for errors."
        exit 1
    fi
fi

# Check if OpenAI API key is needed
if [ -d "$LACYLIGHTS_MCP_DIR" ] && [ -f "$LACYLIGHTS_MCP_DIR/.env" ]; then
    if grep -q "OPENAI_API_KEY=your-api-key-here" "$LACYLIGHTS_MCP_DIR/.env"; then
        result=$(show_dialog "AI Configuration" "Would you like to configure your OpenAI API key for AI features?" "\"Later\", \"Configure\"")

        if [[ "$result" =~ "Configure" ]]; then
            api_key=$(get_text_input "OpenAI API Key" "Enter your OpenAI API key:" "")

            if [ ! -z "$api_key" ]; then
                # Update the .env file
                sed -i '' "s/OPENAI_API_KEY=your-api-key-here/OPENAI_API_KEY=$api_key/" "$LACYLIGHTS_MCP_DIR/.env"
                show_notification "Configuration Updated" "OpenAI API key has been saved"
            fi
        fi
    fi
fi

# Create a temporary script that will run in Terminal
TEMP_LAUNCHER="/tmp/lacylights_launcher_$$.sh"
cat > "$TEMP_LAUNCHER" << 'LAUNCHER_EOF'
#!/bin/bash

# Source paths from the app bundle
source "RESOURCES_DIR_PLACEHOLDER/scripts/paths.sh"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}LacyLights Platform Launcher${NC}"
echo "============================"
echo ""

# Check for updates if update script exists
if [ -f "$RESOURCES_DIR/scripts/update-repos.sh" ]; then
    echo -e "${BLUE}Checking for updates...${NC}"
    echo ""

    # Run update check
    if "$RESOURCES_DIR/scripts/update-repos.sh" --check; then
        echo ""
        echo -n "Updates are available. Would you like to update before starting? [Y/n] "
        read -r update_response

        if [[ ! "$update_response" =~ ^([nN][oO]|[nN])$ ]]; then
            echo ""
            "$RESOURCES_DIR/scripts/update-repos.sh" --auto
            echo ""
        fi
    fi
    echo ""
fi

# Source the network selection and startup from bundled script
source "$RESOURCES_DIR/scripts/start.sh"
LAUNCHER_EOF

# Replace placeholder with actual resources directory
sed -i '' "s|RESOURCES_DIR_PLACEHOLDER|$RESOURCES_DIR|" "$TEMP_LAUNCHER"
chmod +x "$TEMP_LAUNCHER"

# Launch in Terminal
osascript <<EOF
tell application "Terminal"
    activate
    do script "$TEMP_LAUNCHER"
end tell
EOF

# Clean up after a delay
(sleep 10 && rm -f "$TEMP_LAUNCHER") &
