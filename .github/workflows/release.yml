name: Create Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: 'patch'
      release_name:
        description: 'Release name (optional - leave blank for auto-generated)'
        required: false
        type: string

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # RELEASE_TOKEN must have 'contents: write' permission to push commits and tags
          # This bypasses branch protection rules that require pull requests
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get current version
        id: current_version
        run: |
          # Try to read from VERSION file first, then git tags, then default to 0.0.0
          if [ -f VERSION ]; then
            CURRENT_VERSION=$(cat VERSION | tr -d '\n' | tr -d ' ')
          else
            CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo "0.0.0")
          fi
          # Validate version format
          if [[ ! "$CURRENT_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format: $CURRENT_VERSION, defaulting to 0.0.0"
            CURRENT_VERSION="0.0.0"
          fi
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.version }}"
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"

          case "${{ inputs.version_bump }}" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Update VERSION file, commit, and create tag
        run: |
          set -e
          TAG_NAME="v${{ steps.new_version.outputs.version }}"

          # Update VERSION file and commit
          echo "${{ steps.new_version.outputs.version }}" > VERSION
          git add VERSION
          git commit -m "chore: bump version to ${{ steps.new_version.outputs.version }}"

          # Push commit with retry logic (3 attempts, 5 second delay)
          for i in 1 2 3; do
            if git push; then
              break
            fi
            if [ "$i" -lt 3 ]; then
              echo "git push failed (attempt $i/3), retrying in 5 seconds..."
              sleep 5
            else
              echo "git push failed after 3 attempts. Please check network or remote conflicts."
              exit 1
            fi
          done

          # Create and push tag with cleanup on failure
          git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
          if ! git push origin "$TAG_NAME"; then
            echo "Tag push failed, cleaning up local tag $TAG_NAME"
            git tag -d "$TAG_NAME"
            exit 1
          fi

      - name: Generate release notes
        id: release_notes
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.generateReleaseNotes({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: 'v${{ steps.new_version.outputs.version }}',
            });
            return release.body;
          result-encoding: string

      - name: Determine release name
        id: release_name
        run: |
          if [ -n "${{ inputs.release_name }}" ]; then
            echo "name=${{ inputs.release_name }}" >> $GITHUB_OUTPUT
          else
            echo "name=v${{ steps.new_version.outputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        uses: actions/github-script@v7
        with:
          script: |
            const tagName = 'v${{ steps.new_version.outputs.version }}';

            // Check if release already exists
            try {
              await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tagName
              });
              core.info(`Release ${tagName} already exists. Skipping creation.`);
              return;
            } catch (error) {
              if (error.status !== 404) {
                throw error;
              }
            }

            // Create the release
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tagName,
              name: '${{ steps.release_name.outputs.name }}',
              body: `${{ steps.release_notes.outputs.result }}`,
              draft: false,
              prerelease: false,
              generate_release_notes: true
            });

      - name: Summary
        run: |
          echo "## Release Created Successfully! ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** v${{ steps.new_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Bump Type:** ${{ inputs.version_bump }}" >> $GITHUB_STEP_SUMMARY
          echo "**Previous Version:** v${{ steps.current_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release URL:** https://github.com/${{ github.repository }}/releases/tag/v${{ steps.new_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
